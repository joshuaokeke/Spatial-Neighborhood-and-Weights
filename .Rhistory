knitr::opts_chunk$set(echo = TRUE)
library(sp)
library(spatstat)
library(sf)
library(spatstat.geom)
library(ctv)
library(terra)
library(spdep)
library(terra)
library(RColorBrewer)
library(classInt)
library(epitools)
library(DCluster)
library(rgdal)
library(maptools)
# Define the file path
file_path <- "C:/Spatial Statistics Labwork/Lab5Data/sids2.shp"
# Import the shapefile
sids <- st_read(file_path)
class(sids)
# Check the structure of the imported object
str(sids)
# Extract CRS information using st_crs()
crs_info <- st_crs(sids)
# Print CRS information
print(crs_info)
# Assign the coordinate system (WGS84)
st_crs(sids) <- st_crs("+proj=longlat +ellps=WGS84")
# Check the current CRS
print(st_crs(sids))
# Define the target CRS (NAD27 UTM Zone 17N)
target_crs <- "+proj=utm +zone=17 +datum=NAD27"
# Project the shapefile to the target CRS
sids_projected <- st_transform(sids, target_crs)
# Check the CRS of the projected shapefile
print(st_crs(sids_projected))
# Define the CRS for North Carolina NAD 83 State Plane
nc_crs <- st_crs("+proj=lcc +lat_1=34.33333333333334 +lat_2=36.16666666666666 +lat_0=33.75 +lon_0=-79 +x_0=609601.22 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs")
# Transform the sids shapefile to North Carolina NAD 83 State Plane
sids_SP <- st_transform(sids, nc_crs)
print(st_crs(sids_SP))
par(mfrow=c(2,2))
plot(sids, axes=T)
title("WGS84")
plot(sids_NAD, axes = TRUE)
par(mfrow=c(2,2))
plot(sids, axes=T)
title("WGS84")
plot(sids_NAD, axes = TRUE)
# Create Queen contiguity spatial weights matrix
sids_nbq <- poly2nb(sids, queen = TRUE)
# Check the summary of the spatial weights matrix
summary(sids_nbq)
# Create Queen (false) contiguity spatial weights matrix
sids_nbr <- poly2nb(sids, queen = FALSE)
# Check the summary of the spatial weights matrix
summary(sids_nbr)
plot(st_geometry(sids), main="Spatial Plot with Neighborhoods")
coords <- st_coordinates(sids)
# Check the number of neighborhoods in sids_nbq
num_neighborhoods <- length(sids_nbq)
# Check the number of coordinate pairs in coords
num_coords <- nrow(coords)
# Print out the counts for verification
print(paste("Number of neighborhoods:", num_neighborhoods))
print(paste("Number of coordinate pairs:", num_coords))
# Example adjustment (assuming you need to align coords_2d with sids_nbq correctly)
coords_2d_corrected <- coords[1:num_neighborhoods, ]
par(mfrow=c(1,1))
plot(sids_nbq, coords_2d_corrected)
plot(sids, add= TRUE)
plot(sids_nbr, coords_2d_corrected)
plot(sids, add= TRUE)
